@using Beporsoft.Blazor.Charts.Common
@using Beporsoft.Blazor.Charts.Configuration
@using System.Drawing
<Chart @ref="_chart" Config="_config" Data="_data" />


@code {
    private Chart? _chart;

    private ConfigBase _config = new();
    private ChartData _data = new();


    protected override void OnInitialized()
    {
        _config = new ConfigBase();
        _config.Options
            .AddTitle("Bubble chart")
            .WithLocation(Position.Top, Align.Center)
            .WithFont(16);

        _config.AddLinearAxis("x")
            .AddTitle("X axis");
        _config.AddLinearAxis("y")
            .AddTitle("Y axis");


        _config.Options
            .AddSubtitle($"This is one bubble chart. Points are represented in 2D and one third dimension which is expressed as the bubble size")
            .WithFont(12);

        base.OnInitialized();
    }

    protected override Task OnParametersSetAsync()
    {

        return base.OnParametersSetAsync();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {

            var dataset1 = BuildContinuousDataset();

            _data.Labels = RandomDataGen.GetNumberSeries(1, 50).ToList();
            _data.Datasets.Add(dataset1);
        }
    }

    private IChartDataset BuildContinuousDataset()
    {
        var xD = RandomDataGen.GetDoubleSamples(-10, 10, 50).ToList();
        var yD = RandomDataGen.GetDoubleSamples(-10, 10, 50).ToList();
        var zD = RandomDataGen.GetDoubleSamples(0, 100, 50).ToList();
        Func<double, double> converter = (z) => z / 10.0;

        List<BubblePoint<double>> points = new();
        for(int i = 0; i < xD.Count(); i++)
        {
            points.Add(new BubblePoint<double>(xD[i], yD[i], zD[i], converter));
        }

        var dataset = new BubbleDataset<double>("Bubble dataset", points);

        return dataset;
    }


}
